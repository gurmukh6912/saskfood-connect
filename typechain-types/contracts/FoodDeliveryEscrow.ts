/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FoodDeliveryEscrow {
  export type OrderStruct = {
    customer: AddressLike;
    restaurant: AddressLike;
    driver: AddressLike;
    amount: BigNumberish;
    deliveryFee: BigNumberish;
    platformFee: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
  };

  export type OrderStructOutput = [
    customer: string,
    restaurant: string,
    driver: string,
    amount: bigint,
    deliveryFee: bigint,
    platformFee: bigint,
    status: bigint,
    createdAt: bigint
  ] & {
    customer: string;
    restaurant: string;
    driver: string;
    amount: bigint;
    deliveryFee: bigint;
    platformFee: bigint;
    status: bigint;
    createdAt: bigint;
  };
}

export interface FoodDeliveryEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createOrder"
      | "getOrder"
      | "orders"
      | "owner"
      | "platformFeePercent"
      | "refundOrder"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateOrderStatus"
      | "updatePlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OrderCreated"
      | "OrderRefunded"
      | "OrderStatusUpdated"
      | "OwnershipTransferred"
      | "PaymentReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getOrder", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    customer: AddressLike,
    restaurant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    customer: string,
    restaurant: string,
    amount: bigint
  ];
  export interface OutputObject {
    orderId: string;
    customer: string;
    restaurant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderRefundedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    customer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderId: string, customer: string, amount: bigint];
  export interface OutputObject {
    orderId: string;
    customer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderStatusUpdatedEvent {
  export type InputTuple = [orderId: BytesLike, status: BigNumberish];
  export type OutputTuple = [orderId: string, status: bigint];
  export interface OutputObject {
    orderId: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [
    orderId: BytesLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    orderId: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FoodDeliveryEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): FoodDeliveryEscrow;
  waitForDeployment(): Promise<this>;

  interface: FoodDeliveryEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createOrder: TypedContractMethod<
    [orderId: BytesLike, restaurant: AddressLike, driver: AddressLike],
    [void],
    "payable"
  >;

  getOrder: TypedContractMethod<
    [orderId: BytesLike],
    [FoodDeliveryEscrow.OrderStructOutput],
    "view"
  >;

  orders: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, bigint] & {
        customer: string;
        restaurant: string;
        driver: string;
        amount: bigint;
        deliveryFee: bigint;
        platformFee: bigint;
        status: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  refundOrder: TypedContractMethod<[orderId: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOrderStatus: TypedContractMethod<
    [orderId: BytesLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [orderId: BytesLike, restaurant: AddressLike, driver: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BytesLike],
    [FoodDeliveryEscrow.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, bigint] & {
        customer: string;
        restaurant: string;
        driver: string;
        amount: bigint;
        deliveryFee: bigint;
        platformFee: bigint;
        status: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundOrder"
  ): TypedContractMethod<[orderId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOrderStatus"
  ): TypedContractMethod<
    [orderId: BytesLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFeePercent: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderRefunded"
  ): TypedContractEvent<
    OrderRefundedEvent.InputTuple,
    OrderRefundedEvent.OutputTuple,
    OrderRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OrderStatusUpdated"
  ): TypedContractEvent<
    OrderStatusUpdatedEvent.InputTuple,
    OrderStatusUpdatedEvent.OutputTuple,
    OrderStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;

  filters: {
    "OrderCreated(bytes32,address,address,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OrderRefunded(bytes32,address,uint256)": TypedContractEvent<
      OrderRefundedEvent.InputTuple,
      OrderRefundedEvent.OutputTuple,
      OrderRefundedEvent.OutputObject
    >;
    OrderRefunded: TypedContractEvent<
      OrderRefundedEvent.InputTuple,
      OrderRefundedEvent.OutputTuple,
      OrderRefundedEvent.OutputObject
    >;

    "OrderStatusUpdated(bytes32,uint8)": TypedContractEvent<
      OrderStatusUpdatedEvent.InputTuple,
      OrderStatusUpdatedEvent.OutputTuple,
      OrderStatusUpdatedEvent.OutputObject
    >;
    OrderStatusUpdated: TypedContractEvent<
      OrderStatusUpdatedEvent.InputTuple,
      OrderStatusUpdatedEvent.OutputTuple,
      OrderStatusUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentReleased(bytes32,address,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
  };
}
